//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MethodContainerizer.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MethodContainerizer.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FROM mcr.microsoft.com/dotnet/sdk:5.0 AS build-env
        ///WORKDIR /app
        ///
        ///COPY *.csproj ./
        ///RUN dotnet restore
        ///
        ///COPY . .
        ///RUN dotnet publish -c Release -o out
        ///
        ///FROM mcr.microsoft.com/dotnet/aspnet:5.0
        ///EXPOSE 80
        ///WORKDIR /app
        ///COPY --from=build-env /app/out .
        ///COPY --from=build-env /app/program.dll .
        ///COPY --from=build-env /app/appsettings.json .
        ///ENTRYPOINT [&quot;dotnet&quot;, &quot;Runner.dll&quot;].
        /// </summary>
        internal static string Dockerfile {
            get {
                return ResourceManager.GetString("Dockerfile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;Logging&quot;: {
        ///    &quot;LogLevel&quot;: {
        ///      &quot;Default&quot;: &quot;Information&quot;,
        ///      &quot;Microsoft&quot;: &quot;Warning&quot;,
        ///      &quot;Microsoft.Hosting.Lifetime&quot;: &quot;Information&quot;
        ///    }
        ///  },
        ///  &quot;AllowedHosts&quot;: &quot;*&quot;,
        ///}.
        /// </summary>
        internal static string RunnerAppSettings {
            get {
                return ResourceManager.GetString("RunnerAppSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using Microsoft.AspNetCore.Mvc;
        ///using Newtonsoft.Json;
        ///using Newtonsoft.Json.Linq;
        ///using System;
        ///using System.Collections.Generic;
        ///using System.IO;
        ///using System.Linq;
        ///using System.Reflection;
        ///using System.Runtime.Serialization;
        ///using System.Threading.Tasks;
        ///
        ///namespace IsolatedMethod.Runner
        ///{
        ///    [Route(&quot;/&quot;)]
        ///    public class Entrypoint : Controller
        ///    {
        ///        [HttpPost]
        ///        public async Task&lt;object&gt; Execute()
        ///        {
        ///            using var bodyStream = new StreamReader(HttpContext [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string RunnerEntrypoint {
            get {
                return ResourceManager.GetString("RunnerEntrypoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using Microsoft.AspNetCore.Hosting;
        ///using Microsoft.Extensions.Hosting;
        ///using Newtonsoft.Json;
        ///using System;
        ///using System.IO;
        ///using System.Linq;
        ///using System.Reflection;
        ///using System.Runtime.Serialization;
        ///
        ///namespace IsolatedMethod.Runner
        ///{
        ///    class Program
        ///    {
        ///        public static void Main(string[] args)
        ///        {
        ///            CreateHostBuilder(args).Build().Run();
        ///        }
        ///
        ///        public static IHostBuilder CreateHostBuilder(string[] args) =&gt;
        ///            Host.CreateDefaultBuilder( [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string RunnerProgram {
            get {
                return ResourceManager.GetString("RunnerProgram", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;Project Sdk=&quot;Microsoft.NET.Sdk.Web&quot;&gt;
        ///
        ///  &lt;PropertyGroup&gt;
        ///    &lt;TargetFramework&gt;net5.0&lt;/TargetFramework&gt;
        ///  &lt;/PropertyGroup&gt;
        ///
        ///  &lt;ItemGroup&gt;
        ///    &lt;PackageReference Include=&quot;Newtonsoft.Json&quot; Version=&quot;13.0.1&quot; /&gt;
        ///  &lt;/ItemGroup&gt;
        ///
        ///&lt;/Project&gt;.
        /// </summary>
        internal static string RunnerProjectFile {
            get {
                return ResourceManager.GetString("RunnerProjectFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using Microsoft.AspNetCore.Builder;
        ///using Microsoft.AspNetCore.Hosting;
        ///using Microsoft.Extensions.Configuration;
        ///using Microsoft.Extensions.DependencyInjection;
        ///using Microsoft.Extensions.Hosting;
        ///
        ///namespace IsolatedMethod.Runner
        ///{
        ///    public class Startup
        ///    {
        ///        public Startup(IConfiguration configuration)
        ///        {
        ///            Configuration = configuration;
        ///        }
        ///
        ///        public IConfiguration Configuration { get; }
        ///
        ///        // This method gets called by the runtime. Use this  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string RunnerStartup {
            get {
                return ResourceManager.GetString("RunnerStartup", resourceCulture);
            }
        }
    }
}
